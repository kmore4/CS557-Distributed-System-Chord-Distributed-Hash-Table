#!/usr/bin/env python

import os
import glob
import sys
import socket
import hashlib

sys.path.append('gen-py')
sys.path.insert(0, glob.glob('/home/cs557-inst/thrift-0.13.0/lib/py/build/lib*')[0])

from chord import FileStore
import hashlib
import socket
from chord.ttypes import SystemException, RFileMetadata, RFile, NodeID

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer


fileOwner = False
Equal_node = False

fileDict = {}

def createFile(filename, content):
        rFile = RFile()
        rFile.meta = RFileMetadata()

        try:

            key = hashlib.sha256(filename.encode('utf8')).hexdigest()
            if key not in fileDict.keys():
                print("Creating new File.!")
                f = open(filename, "w")
                f.write(content)
                version = 0
                rFile.meta.version = version
                rFile.meta.filename = filename
                rFile.content = content
            else:
                rFile = fileDict[key]
                f = open(filename, "w")
                f.write(content)
                version = int(rFile.meta.version)
                rFile.meta.version = (version + 1)
                rFile.content = content

            fileDict[hashlib.sha256(filename.encode('utf8')).hexdigest()] = rFile
        except:
               print('Error in createFile()')


def checkRange(key, id1, id2):
    bool = False
    if key == id1 or key == id2:
        bool = True
    elif id2 > id1 and id2 > key and id1 < key:
        bool = True
    elif id2 < id1 and (id2>key or id1 < key):
        bool = True
    elif id1 == id2:
        print('id1=id2')
    else:
        bool = False
    return bool

class FileStoreHandler:
    def __init__(self):
        self.finger_table = {}
        self.currentNode = NodeID('', '', 0)

    def getNodeSucc(self):
        print('Inside getNodeSucc()')
        if not len(self.finger_table):
            raise SystemException("Get Node Succ Error..!!! No Finger table")
        return self.finger_table[0]

    def writeFile(self, rFile):
        print('Inside writeFile()')
        global fileOwner
        global Equal_node

        key = hashlib.sha256(rFile.meta.filename.encode('utf8')).hexdigest()
        print("File ID created after SHA256 hash on filename: " + key)
        test_node = self.findSucc(key)

        if test_node != self.currentNode:
            print('File ' + rFile.meta.filename + ' is not owned by ' + (host_addr +':'+port))
            fileOwner = False

        if Equal_node == True and test_node == self.currentNode:
            fileOwner = True


        if fileOwner == True:
            createFile(rFile.meta.filename, rFile.content)

            fileOwner = False
        else:
            raise SystemException('This Server ' + (host_addr +':'+port) + ' is not the owner of file ' + rFile.meta.filename)

    def readFile(self, filename):
        print('Inside readFile()')
        global fileOwner
        global Equal_node
        key = hashlib.sha256(filename.encode('utf8')).hexdigest()
        print("File ID created after SHA256 hash on filename: " + key)
        test_node = self.findSucc(key)

        if test_node != self.currentNode:
            print('File ' + filename + ' is not owned by ' + (host_addr +':'+port))
            fileOwner = False

        if Equal_node == True and test_node == self.currentNode:
            fileOwner = True


        if fileOwner == True:

            key = hashlib.sha256(filename.encode('utf8')).hexdigest()
            if key not in fileDict.keys():
                raise SystemException('This server ' + (host_addr +':'+port) + ' owns this file: ' + filename + ' But, File is not available yet.')
            else:
                rfile = RFile()
                rfilemetadata = RFileMetadata('',0)
                rfile = fileDict[key]
                return rfile
            fileOwner = False
        else:
            raise SystemException('This Server ' + (host_addr +':'+port) + ' is not the owner of ' + filename)

    def setFingertable(self, finger_table):
        print('Inside setFingertable()')
        self.finger_table = finger_table
        self.currentNode.ip = socket.gethostbyname(socket.gethostname())
        self.currentNode.port = int(sys.argv[1])
        self.currentNode.id = HashNode


    def findSucc(self, key):
        print('Inside findSucc()')
        global fileOwner
        global Equal_node


        if not len(self.finger_table):
            raise SystemException('Finger Table is Empty')

        pre_node =  self.findPred(key)

        if pre_node.id == key:
            return pre_node
        elif self.currentNode == pre_node:
            if Equal_node == True:
                return self.currentNode
            else:
                succ_node = self.finger_table[0]
        else:
            transport = TSocket.TSocket(pre_node.ip, pre_node.port)
            transport = TTransport.TBufferedTransport(transport)
            protocol = TBinaryProtocol.TBinaryProtocol(transport)
            client = FileStore.Client(protocol)

            transport.open()

            succ_node =   client.getNodeSucc()
            transport.close()

            if self.currentNode != succ_node:
                fileOwner = False
            else:
                fileOwner = True

        return succ_node

    def findPred(self, key):
        print('Inside findPred()')

        if not len(self.finger_table):
            raise SystemException('Finger Table is Empty')

        Equal_node = False
        fileOwner = False

        firstEntry = self.finger_table[0].id

        result = checkRange(key, self.currentNode.id, firstEntry)
        if result == True:
            fileOwner = True

            if self.currentNode.id == key:
                Equal_node = True

            return self.currentNode
        else:
            returned_node = self.currentNode
            for n in reversed(self.finger_table):
                res = checkRange(n.id, self.currentNode.id, key)
                if res == True:
                    n.port = int(n.port)
                    returned_node = n

            x = False
            if self.currentNode == returned_node:
                x = True
            if x == True:
                transport = TSocket.TSocket(self.finger_table[0].ip, self.finger_table[1].port)
                transport = TTransport.TBufferedTransport(transport)
                protocol = TBinaryProtocol.TBinaryProtocol(transport)
                client = FileStore.Client(protocol)

                transport.open()
                pred_node =   client.findPred(key)
                transport.close()
                return pred_node
            else:

                if (returned_node.ip == self.currentNode.ip and returned_node.port == self.currentNode.port) == False:
                    transport = TSocket.TSocket(self.finger_table[0].ip, self.finger_table[1].port)
                    transport = TTransport.TBufferedTransport(transport)
                    protocol = TBinaryProtocol.TBinaryProtocol(transport)
                    client = FileStore.Client(protocol)

                    transport.open()
                    pred_node =   client.findPred(key)
                    transport.close()
                    return pred_node
                else:
                    return returned_node


if __name__ == '__main__':
    handler = FileStoreHandler()
    processor = FileStore.Processor(handler)
    transport = TSocket.TServerSocket(port=int(sys.argv[1]))
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()
    server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)
    port = sys.argv[1]
    host_addr = socket.gethostbyname(socket.gethostname())

    HashNode = hashlib.sha256((host_addr +':'+port).encode('utf8')).hexdigest()
    print('server IP: ', host_addr)
    print('server Port: ', port)
    print('node_hash: ', HashNode)

    print('Server ' + (host_addr +':'+port) + ' is Started...')
    server.serve()
